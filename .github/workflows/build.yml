name: Release test

on:
  push:
  workflow_dispatch:

permissions:
  contents: 'write'

jobs:
  release:
    runs-on: ${{ matrix.os }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest

    steps:
      # - name: Setup
      #   run: |
      #     git config --global url."https://${{secrets.USER}}:${{secrets.TOKEN}}@github.com/".insteadOf "https://github.com/"
      #     git config --global url."https://${{secrets.USER}}:${{secrets.TOKEN}}@api.github.com/".insteadOf "https://api.github.com/"

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.22

      - name: Setup GO
        run: |
          go version
          echo GOPATH=$(go env GOPATH) >> $GITHUB_ENV
          echo GOBIN=$(go env GOPATH)/bin >> $GITHUB_ENV
          echo $(go env GOPATH)/bin >> $GITHUB_PATH

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install LibSecret
        if: matrix.os == 'ubuntu-latest' # only for ubuntu 24 or latest
        run:
          sudo apt-get install libsecret-1-dev

      - name: Install AzureSignTool
        if: ${{ startsWith(matrix.os, 'windows-') }}
        run: dotnet tool install --global AzureSignTool

      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 20.9.0

      - name: Install Webpack
        run: npm install --save-dev webpack-cli --legacy-peer-deps

      - name: Update locale
        run: npm run update:locale
        env:
          GITHUB_TOKEN: ${{secrets.TOKEN}}

      # - name: Update Addon only AMD
      #   if: ${{ startsWith(matrix.os, 'windows-') }}
      #   shell: bash
      #   run: |
      #     ./update-ci.sh --os="${{matrix.os}}" --middleware-version="$( cat middleware.version )"

      # - name: Update Addon AMD and ARM
      #   if: ${{ !startsWith(matrix.os, 'windows-') }}
      #   shell: bash
      #   run: |
      #     ./update-ci.sh --os="${{matrix.os}}" --middleware-version="$( cat middleware.version )" --arch="arm"
      #     ./update-ci.sh --os="${{matrix.os}}" --middleware-version="$( cat middleware.version )" --arch="amd"

      - name: Build Native Messaging Host Windows
        if: ${{ startsWith(matrix.os, 'windows-') }}
        run: npm run build:nmh-win
        env:
          CGO_ENABLED: 0

      - name: Build Native Messaging Host
        if: ${{ !startsWith(matrix.os, 'windows-') }}
        run: npm run build:nmh
        env:
          CGO_ENABLED: 0

      - name: Make artifacts dir
        run: |
          mkdir -p artifacts

      - name: Cleanup artifacts
        if: ${{ !startsWith(matrix.os, 'windows-') }}
        run: |
          mv dist/*.{zip,dmg,deb,AppImage,exe,snap,rpm,tar.gz} artifacts || true

      - name: Cleanup artifacts Windows
        if: ${{ startsWith(matrix.os, 'windows-') }}
        run: |
          rm dist/nativeMessagingHost.exe
          mv dist/*.exe artifacts

      - name: Create tag
        uses: rickstaa/action-create-tag@v1
        id: "tag_create"
        with:
          tag: "latest2"
          tag_exists_error: false
          message: "Latest release"
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.tag_create.outputs.tag }}
          release_name: ${{ steps.tag_create.outputs.tag }}
          draft: false
          prerelease: false
          
      # - name: Release
      #   uses: softprops/action-gh-release@v0.1.14
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     files: "artifacts/**"
          
      - name: debug
        if: ${{ !startsWith(matrix.os, 'windows-') }}
        run: |
          echo "list dist/:"
          ls -alh dist/
          echo "list artifacts/:"
          ls -alh artifacts/

      - name: debug Windows
        if: ${{ startsWith(matrix.os, 'windows-') }}
        shell: pwsh
        run: |
          Get-ChildItem -Path dist | Format-Table -Property Mode, LastWriteTime, Length, Name
          Get-ChildItem -Path artifacts | Format-Table -Property Mode, LastWriteTime, Length, Name

